/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_optimizers__FunctionFactory swig_types[0] 
#define  SWIGTYPE_p_optimizers__ParameterNotFound swig_types[1] 
#define  SWIGTYPE_p_optimizers__Gaussian swig_types[2] 
#define  SWIGTYPE_p_std__vectorToptimizers__Function_p_t swig_types[3] 
#define  SWIGTYPE_p_optimizers__logical swig_types[4] 
#define  SWIGTYPE_p_double swig_types[5] 
#define  SWIGTYPE_p_optimizers__Lbfgs swig_types[6] 
#define  SWIGTYPE_p_optimizers__FunctionTest swig_types[7] 
#define  SWIGTYPE_p_std__vectorToptimizers__Parameter_t swig_types[8] 
#define  SWIGTYPE_p_optimizers__Minuit swig_types[9] 
#define  SWIGTYPE_p_std__vectorTdouble_t__const_iterator swig_types[10] 
#define  SWIGTYPE_p_std__pairTdouble_double_t swig_types[11] 
#define  SWIGTYPE_p_std__vectorTdouble_t swig_types[12] 
#define  SWIGTYPE_p_std__string swig_types[13] 
#define  SWIGTYPE_p_optimizers__Optimizer swig_types[14] 
#define  SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t swig_types[15] 
#define  SWIGTYPE_p_optimizers__Exception swig_types[16] 
#define  SWIGTYPE_p_optimizers__Rosen swig_types[17] 
#define  SWIGTYPE_p_std__vectorToptimizers__Arg_p_t swig_types[18] 
#define  SWIGTYPE_p_mfcn swig_types[19] 
#define  SWIGTYPE_p_optimizers__Arg swig_types[20] 
#define  SWIGTYPE_p_optimizers__dArg swig_types[21] 
#define  SWIGTYPE_p_optimizers__Parameter swig_types[22] 
#define  SWIGTYPE_p_optimizers__OutOfBounds swig_types[23] 
#define  SWIGTYPE_p_optimizers__MyFun swig_types[24] 
#define  SWIGTYPE_p_optimizers__PowerLaw swig_types[25] 
#define  SWIGTYPE_p_optimizers__Mcmc swig_types[26] 
#define  SWIGTYPE_p_optimizers__SumFunction swig_types[27] 
#define  SWIGTYPE_p_optimizers__ProductFunction swig_types[28] 
#define  SWIGTYPE_p_optimizers__Function swig_types[29] 
#define  SWIGTYPE_p_optimizers__CompositeFunction swig_types[30] 
#define  SWIGTYPE_p_int swig_types[31] 
#define  SWIGTYPE_p_optimizers__AbsEdge swig_types[32] 
#define  SWIGTYPE_p_std__vectorTstd__string_t swig_types[33] 
#define  SWIGTYPE_p_optimizers__Drmngb swig_types[34] 
static swig_type_info *swig_types[36];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _optimizers.so
  ------------------------------------------------*/
#define SWIG_init    init_optimizers

#define SWIG_name    "_optimizers"

#include "../optimizers/Arg.h"
#include "../optimizers/CompositeFunction.h"
#include "../optimizers/Drmngb.h"
#include "../optimizers/Exception.h"
#include "../optimizers/Function.h"
#include "../optimizers/FunctionTest.h"
#include "../optimizers/FunctionFactory.h"
#include "../optimizers/Lbfgs.h"
#include "../optimizers/Mcmc.h"
#include "../optimizers/Minuit.h"
#include "../optimizers/Optimizer.h"
#include "../optimizers/OutOfBounds.h"
#include "../optimizers/Parameter.h"
#include "../optimizers/ParameterNotFound.h"
#include "../optimizers/ProductFunction.h"
#include "../optimizers/SumFunction.h"
#include "../optimizers/dArg.h"
#include "../src/AbsEdge.h"
#include "../src/Gaussian.h"
#include "../src/MyFun.h"
#include "../src/PowerLaw.h"
#include "../src/Rosen.h"
#include <vector>
#include <string>

void optimizers_Function_setParamBounds__SWIG_1(optimizers::Function *self,char *paramName,double lower,double upper){
      self->setParamBounds(std::string(paramName), lower, upper);
   }
optimizers::Parameter optimizers_Function_getParam__SWIG_1(optimizers::Function *self,char *paramName){
      return self->getParam(std::string(paramName));
   }
std::string Function_string(char const *str){
      return std::string(str);
   }
optimizers::Function *optimizers_FunctionFactory_create__SWIG_1(optimizers::FunctionFactory *self,char *name){
      return self->create(std::string(name));
   }
void optimizers_FunctionFactory_addFunc__SWIG_1(optimizers::FunctionFactory *self,char *name,optimizers::Function *func,bool fromClone){
      self->addFunc(std::string(name), func, fromClone);
   }

#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o) || PyLong_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return PyFloat_Check(o) ? PyFloat_AsDouble(o) 
        : (PyInt_Check(o) ?   double(PyInt_AsLong(o))
                            : double(PyLong_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromStringAndSize(s.data(),s.size());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

double std_vectorldouble_g_pop___(std::vector<double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }
double std_vectorldouble_g___getitem_____(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<double > std_vectorldouble_g___getslice_____(std::vector<double > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<double > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorldouble_g___setitem_____(std::vector<double > *self,int i,double x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorldouble_g___setslice_____(std::vector<double > *self,int i,int j,std::vector<double > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size()))
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorldouble_g___delitem_____(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorldouble_g___delslice_____(std::vector<double > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlstd_vectorldouble_g_g___nonzero_____(std::vector<std::vector<double > > *self){
                return !(self->empty());
            }
std::vector<double > std_vectorlstd_vectorldouble_g_g_pop___(std::vector<std::vector<double > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::vector<double > x = self->back();
                self->pop_back();
                return x;
            }
std::vector<double > &std_vectorlstd_vectorldouble_g_g___getitem_____(std::vector<std::vector<double > > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<std::vector<double > > std_vectorlstd_vectorldouble_g_g___getslice_____(std::vector<std::vector<double > > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<std::vector<double > > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlstd_vectorldouble_g_g___setitem_____(std::vector<std::vector<double > > *self,int i,std::vector<double > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_vectorldouble_g_g___setslice_____(std::vector<std::vector<double > > *self,int i,int j,std::vector<std::vector<double > > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size())) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlstd_vectorldouble_g_g___delitem_____(std::vector<std::vector<double > > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_vectorldouble_g_g___delslice_____(std::vector<std::vector<double > > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
std::string std_vectorlstd_string_g_pop___(std::vector<std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }
std::string std_vectorlstd_string_g___getitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<std::string > std_vectorlstd_string_g___getslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<std::string > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlstd_string_g___setitem_____(std::vector<std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___setslice_____(std::vector<std::string > *self,int i,int j,std::vector<std::string > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size()))
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlstd_string_g___delitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___delslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_Arg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Arg *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Arg")) goto fail;
    result = (optimizers::Arg *)new optimizers::Arg();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Arg, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Arg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Arg *arg1 = (optimizers::Arg *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Arg",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Arg_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Arg, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_dArg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    optimizers::dArg *result;
    
    if(!PyArg_ParseTuple(args,(char *)"d:new_dArg",&arg1)) goto fail;
    result = (optimizers::dArg *)new optimizers::dArg(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__dArg, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_dArg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::dArg *arg1 = (optimizers::dArg *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_dArg",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__dArg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dArg_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::dArg *arg1 = (optimizers::dArg *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dArg_getValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__dArg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->getValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * dArg_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__dArg, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Exception__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Exception *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Exception")) goto fail;
    result = (optimizers::Exception *)new optimizers::Exception();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    int arg2 = (int) 0 ;
    optimizers::Exception *result;
    std::string *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:new_Exception",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (optimizers::Exception *)new optimizers::Exception(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Exception__SWIG_0(self,args);
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_Exception__SWIG_1(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_Exception__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Exception'");
    return NULL;
}


static PyObject *_wrap_delete_Exception(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Exception *arg1 = (optimizers::Exception *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Exception",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_what(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Exception *arg1 = (optimizers::Exception *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_what",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((optimizers::Exception const *)arg1)->what();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_code(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Exception *arg1 = (optimizers::Exception *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_code",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((optimizers::Exception const *)arg1)->code();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Exception_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Exception, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OutOfBounds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 ;
    optimizers::OutOfBounds *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odddi:new_OutOfBounds",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::OutOfBounds *)new optimizers::OutOfBounds((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__OutOfBounds, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OutOfBounds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::OutOfBounds *arg1 = (optimizers::OutOfBounds *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OutOfBounds",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__OutOfBounds,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OutOfBounds_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::OutOfBounds *arg1 = (optimizers::OutOfBounds *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OutOfBounds_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__OutOfBounds,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->value();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OutOfBounds_minValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::OutOfBounds *arg1 = (optimizers::OutOfBounds *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OutOfBounds_minValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__OutOfBounds,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->minValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OutOfBounds_maxValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::OutOfBounds *arg1 = (optimizers::OutOfBounds *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OutOfBounds_maxValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__OutOfBounds,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->maxValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OutOfBounds_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__OutOfBounds, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ParameterNotFound(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    optimizers::ParameterNotFound *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ParameterNotFound",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::ParameterNotFound *)new optimizers::ParameterNotFound((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__ParameterNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ParameterNotFound(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::ParameterNotFound *arg1 = (optimizers::ParameterNotFound *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ParameterNotFound",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__ParameterNotFound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ParameterNotFound_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__ParameterNotFound, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Parameter__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Parameter")) goto fail;
    result = (optimizers::Parameter *)new optimizers::Parameter();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 = (bool) true ;
    optimizers::Parameter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd|O:new_Parameter",&obj0,&arg2,&arg3,&arg4,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (optimizers::Parameter *)new optimizers::Parameter((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    double arg2 ;
    bool arg3 = (bool) true ;
    optimizers::Parameter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od|O:new_Parameter",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (optimizers::Parameter *)new optimizers::Parameter((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Parameter__SWIG_0(self,args);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_Parameter__SWIG_2(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_Parameter__SWIG_2(self,args);
                }
            }
        }
    }
    if ((argc >= 4) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_new_Parameter__SWIG_1(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_Parameter__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Parameter'");
    return NULL;
}


static PyObject *_wrap_delete_Parameter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Parameter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Parameter_setName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_getName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((optimizers::Parameter const *)arg1)->getName();
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Parameter_setValue",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        (arg1)->setValue(arg2);
        
    }
    catch(optimizers::OutOfBounds &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::OutOfBounds");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_getValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((optimizers::Parameter const *)arg1)->getValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setScale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Parameter_setScale",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setScale(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_getScale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_getScale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((optimizers::Parameter const *)arg1)->getScale();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setTrueValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Parameter_setTrueValue",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        (arg1)->setTrueValue(arg2);
        
    }
    catch(optimizers::OutOfBounds &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::OutOfBounds");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_getTrueValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_getTrueValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((optimizers::Parameter const *)arg1)->getTrueValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setBounds__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odd:Parameter_setBounds",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        (arg1)->setBounds(arg2,arg3);
        
    }
    catch(optimizers::OutOfBounds &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::OutOfBounds");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setBounds__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    std::pair<double,double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Parameter_setBounds",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__pairTdouble_double_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setBounds((std::pair<double,double > const &)*arg2);
        
    }
    catch(optimizers::OutOfBounds &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::OutOfBounds");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setBounds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Parameter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__pairTdouble_double_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Parameter_setBounds__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Parameter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Parameter_setBounds__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Parameter_setBounds'");
    return NULL;
}


static PyObject *_wrap_Parameter_getBounds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    std::pair<double,double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_getBounds",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((optimizers::Parameter const *)arg1)->getBounds();
    
    {
        std::pair<double,double > * resultptr;
        resultptr = new std::pair<double,double >((std::pair<double,double > &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__pairTdouble_double_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_setFree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Parameter_setFree",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setFree(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_isFree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Parameter *arg1 = (optimizers::Parameter *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_isFree",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((optimizers::Parameter const *)arg1)->isFree();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Parameter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Parameter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Function(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Function",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string arg2 ;
    std::string *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setName(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_getName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((optimizers::Function const *)arg1)->getName();
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParam__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOdO:Function_setParam",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    try {
        (arg1)->setParam((std::string const &)*arg2,arg3,arg4);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParam__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOd:Function_setParam",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParam((std::string const &)*arg2,arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParam__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Parameter *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setParam",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParam((optimizers::Parameter const &)*arg2);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParam(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_optimizers__Parameter, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Function_setParam__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Function_setParam__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_Function_setParam__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Function_setParam'");
    return NULL;
}


static PyObject *_wrap_Function_getParamValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getParamValue",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::Function const *)arg1)->getParamValue((std::string const &)*arg2);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getParam__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    optimizers::Parameter result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getParam",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = ((optimizers::Function const *)arg1)->getParam((std::string const &)*arg2);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    {
        optimizers::Parameter * resultptr;
        resultptr = new optimizers::Parameter((optimizers::Parameter &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_optimizers__Parameter, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamBounds__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOdd:Function_setParamBounds",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParamBounds((std::string const &)*arg2,arg3,arg4);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamScale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOd:Function_setParamScale",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParamScale((std::string const &)*arg2,arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamTrueValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOd:Function_setParamTrueValue",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParamTrueValue((std::string const &)*arg2,arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getNumParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_getNumParams",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((optimizers::Function const *)arg1)->getNumParams();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setParamValues",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParamValues((std::vector<double > const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamValues_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    SwigValueWrapper< std::vector<double >::const_iterator > arg2 ;
    SwigValueWrapper< std::vector<double >::const_iterator > result;
    std::vector<double >::const_iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setParamValues_",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__vectorTdouble_t__const_iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (arg1)->setParamValues_(arg2);
    
    {
        std::vector<double >::const_iterator * resultptr;
        resultptr = new std::vector<double >::const_iterator((std::vector<double >::const_iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setParams",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setParams(*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getParamNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getParamNames",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getParamNames(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getParamValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getParamValues",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getParamValues(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getParams",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getParams(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getNumFreeParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_getNumFreeParams",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((optimizers::Function const *)arg1)->getNumFreeParams();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setFreeParamValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setFreeParamValues",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setFreeParamValues((std::vector<double > const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setFreeParamValues_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    SwigValueWrapper< std::vector<double >::const_iterator > arg2 ;
    SwigValueWrapper< std::vector<double >::const_iterator > result;
    std::vector<double >::const_iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setFreeParamValues_",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__vectorTdouble_t__const_iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (arg1)->setFreeParamValues_(arg2);
    
    {
        std::vector<double >::const_iterator * resultptr;
        resultptr = new std::vector<double >::const_iterator((std::vector<double >::const_iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getFreeParamNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getFreeParamNames",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getFreeParamNames(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getFreeParamValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getFreeParamValues",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getFreeParamValues(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getFreeParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_getFreeParams",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getFreeParams(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setFreeParams(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_setFreeParams",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->setFreeParams(*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Function const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function___call__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function___call__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Function const *)arg1)->operator ()(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Function const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getDerivs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::vector<double > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_getDerivs",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getDerivs(*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getFreeDerivs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::vector<double > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_getFreeDerivs",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    ((optimizers::Function const *)arg1)->getFreeDerivs(*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_integral(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    optimizers::Arg *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_integral",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Function const *)arg1)->integral(*arg2,*arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::Function const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_funcType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_funcType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->funcType();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_argType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_argType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string &_result_ref = (arg1)->argType();
        result = (std::string *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamBounds__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    char *arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Osdd:Function_setParamBounds",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers_Function_setParamBounds__SWIG_1(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_setParamBounds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_Function_setParamBounds__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_Function_setParamBounds__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Function_setParamBounds'");
    return NULL;
}


static PyObject *_wrap_Function_getParam__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = (optimizers::Function *) 0 ;
    char *arg2 ;
    optimizers::Parameter result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Function_getParam",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = optimizers_Function_getParam__SWIG_1(arg1,arg2);
    
    {
        optimizers::Parameter * resultptr;
        resultptr = new optimizers::Parameter((optimizers::Parameter &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_optimizers__Parameter, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_getParam(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Function_getParam__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Function_getParam__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Function_getParam'");
    return NULL;
}


static PyObject *_wrap_Function_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    std::string result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:Function_string",&arg1)) goto fail;
    result = Function_string((char const *)arg1);
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Function_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Function, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_CompositeFunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::CompositeFunction *arg1 = (optimizers::CompositeFunction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CompositeFunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__CompositeFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CompositeFunction_setParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::CompositeFunction *arg1 = (optimizers::CompositeFunction *) 0 ;
    optimizers::Parameter *arg2 = 0 ;
    std::string *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CompositeFunction_setParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__CompositeFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Parameter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setParam((optimizers::Parameter const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CompositeFunction_setParamValues_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::CompositeFunction *arg1 = (optimizers::CompositeFunction *) 0 ;
    SwigValueWrapper< std::vector<double >::const_iterator > arg2 ;
    SwigValueWrapper< std::vector<double >::const_iterator > result;
    std::vector<double >::const_iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CompositeFunction_setParamValues_",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__CompositeFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__vectorTdouble_t__const_iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (arg1)->setParamValues_(arg2);
    
    {
        std::vector<double >::const_iterator * resultptr;
        resultptr = new std::vector<double >::const_iterator((std::vector<double >::const_iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CompositeFunction_setFreeParamValues_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::CompositeFunction *arg1 = (optimizers::CompositeFunction *) 0 ;
    SwigValueWrapper< std::vector<double >::const_iterator > arg2 ;
    SwigValueWrapper< std::vector<double >::const_iterator > result;
    std::vector<double >::const_iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CompositeFunction_setFreeParamValues_",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__CompositeFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__vectorTdouble_t__const_iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (arg1)->setFreeParamValues_(arg2);
    
    {
        std::vector<double >::const_iterator * resultptr;
        resultptr = new std::vector<double >::const_iterator((std::vector<double >::const_iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CompositeFunction_getParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::CompositeFunction *arg1 = (optimizers::CompositeFunction *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    optimizers::Parameter result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CompositeFunction_getParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__CompositeFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((optimizers::CompositeFunction const *)arg1)->getParam((std::string const &)*arg2,(std::string const &)*arg3);
    
    {
        optimizers::Parameter * resultptr;
        resultptr = new optimizers::Parameter((optimizers::Parameter &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_optimizers__Parameter, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CompositeFunction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__CompositeFunction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ProductFunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Function *arg2 = 0 ;
    optimizers::ProductFunction *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ProductFunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::ProductFunction *)new optimizers::ProductFunction(*arg1,*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__ProductFunction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProductFunction_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::ProductFunction *arg1 = (optimizers::ProductFunction *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ProductFunction_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__ProductFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::ProductFunction const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ProductFunction_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::ProductFunction *arg1 = (optimizers::ProductFunction *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ProductFunction_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__ProductFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::ProductFunction const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ProductFunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::ProductFunction *arg1 = (optimizers::ProductFunction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ProductFunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__ProductFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ProductFunction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__ProductFunction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SumFunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Function *arg2 = 0 ;
    optimizers::SumFunction *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SumFunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::SumFunction *)new optimizers::SumFunction(*arg1,*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__SumFunction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SumFunction_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::SumFunction *arg1 = (optimizers::SumFunction *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SumFunction_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__SumFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::SumFunction const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SumFunction_integral(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::SumFunction *arg1 = (optimizers::SumFunction *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    optimizers::Arg *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SumFunction_integral",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__SumFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::SumFunction const *)arg1)->integral(*arg2,*arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SumFunction_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::SumFunction *arg1 = (optimizers::SumFunction *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SumFunction_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__SumFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::SumFunction const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SumFunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::SumFunction *arg1 = (optimizers::SumFunction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SumFunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__SumFunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SumFunction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__SumFunction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FunctionTest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    std::string *arg2 = 0 ;
    optimizers::FunctionTest *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FunctionTest",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::FunctionTest *)new optimizers::FunctionTest(*arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__FunctionTest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FunctionTest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionTest *arg1 = (optimizers::FunctionTest *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FunctionTest",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionTest,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionTest_parameters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionTest *arg1 = (optimizers::FunctionTest *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FunctionTest_parameters",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionTest,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->parameters((std::vector<optimizers::Parameter > const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionTest_freeParameters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionTest *arg1 = (optimizers::FunctionTest *) 0 ;
    std::vector<optimizers::Parameter > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FunctionTest_freeParameters",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionTest,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Parameter_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->freeParameters((std::vector<optimizers::Parameter > const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionTest_funcEvaluations(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionTest *arg1 = (optimizers::FunctionTest *) 0 ;
    std::vector<optimizers::Arg * > *arg2 = 0 ;
    std::vector<double > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FunctionTest_funcEvaluations",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionTest,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Arg_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->funcEvaluations((std::vector<optimizers::Arg * > const &)*arg2,(std::vector<double > const &)*arg3);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionTest_derivatives(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionTest *arg1 = (optimizers::FunctionTest *) 0 ;
    std::vector<optimizers::Arg * > *arg2 = 0 ;
    double arg3 = (double) 1e-5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|d:FunctionTest_derivatives",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionTest,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Arg_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->derivatives((std::vector<optimizers::Arg * > const &)*arg2,arg3);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FunctionTest_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__FunctionTest, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Mcmc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Mcmc *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Mcmc",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::Mcmc *)new optimizers::Mcmc(*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Mcmc, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Mcmc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Mcmc *arg1 = (optimizers::Mcmc *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Mcmc",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Mcmc,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mcmc_addPriors(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Mcmc *arg1 = (optimizers::Mcmc *) 0 ;
    std::vector<optimizers::Function * > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mcmc_addPriors",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Mcmc,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorToptimizers__Function_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->addPriors(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mcmc_generateSamples(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Mcmc *arg1 = (optimizers::Mcmc *) 0 ;
    std::vector<std::vector<double > > *arg2 = 0 ;
    unsigned long arg3 = (unsigned long) 1e4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:Mcmc_generateSamples",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Mcmc,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = (unsigned long) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->generateSamples(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mcmc_setTransitionWidths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Mcmc *arg1 = (optimizers::Mcmc *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mcmc_setTransitionWidths",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Mcmc,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setTransitionWidths(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mcmc_getTransitionWidths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Mcmc *arg1 = (optimizers::Mcmc *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mcmc_getTransitionWidths",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Mcmc,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->getTransitionWidths(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mcmc_writeSamples(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    std::vector<std::vector<double > > *arg2 = 0 ;
    std::string *argp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mcmc_writeSamples",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        optimizers::Mcmc::writeSamples(arg1,*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Mcmc_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Mcmc, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Optimizer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Optimizer *arg1 = (optimizers::Optimizer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Optimizer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Optimizer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Optimizer_find_min(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Optimizer *arg1 = (optimizers::Optimizer *) 0 ;
    int arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oid:Optimizer_find_min",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Optimizer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->find_min(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Optimizer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Optimizer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Lbfgs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Lbfgs *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Lbfgs",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::Lbfgs *)new optimizers::Lbfgs(*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Lbfgs, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Lbfgs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Lbfgs",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_setMaxVarMetCorr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Lbfgs_setMaxVarMetCorr",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMaxVarMetCorr(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_setPgtol(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Lbfgs_setPgtol",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setPgtol(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_setMaxIterations(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Lbfgs_setMaxIterations",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMaxIterations(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_getRetCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Lbfgs_getRetCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((optimizers::Lbfgs const *)arg1)->getRetCode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_getErrorString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Lbfgs_getErrorString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((optimizers::Lbfgs const *)arg1)->getErrorString();
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Lbfgs_find_min(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Lbfgs *arg1 = (optimizers::Lbfgs *) 0 ;
    int arg2 = (int) 0 ;
    double arg3 = (double) 1e-5 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|id:Lbfgs_find_min",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Lbfgs,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->find_min(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Lbfgs_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Lbfgs, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_setulb_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int *arg6 = (int *) 0 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    double *arg9 = (double *) 0 ;
    double *arg10 = (double *) 0 ;
    double *arg11 = (double *) 0 ;
    int *arg12 = (int *) 0 ;
    char *arg13 ;
    int *arg14 = (int *) 0 ;
    char *arg15 ;
    optimizers::logical *arg16 = (optimizers::logical *) 0 ;
    int *arg17 = (int *) 0 ;
    double *arg18 = (double *) 0 ;
    optimizers::ftnlen arg19 ;
    optimizers::ftnlen arg20 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj13 = 0 ;
    PyObject * obj15 = 0 ;
    PyObject * obj16 = 0 ;
    PyObject * obj17 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOsOsOOOll:setulb_",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&arg13,&obj13,&arg15,&obj15,&obj16,&obj17,&arg19,&arg20)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj7,(void **) &arg8, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj8,(void **) &arg9, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj9,(void **) &arg10, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj10,(void **) &arg11, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj11,(void **) &arg12, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj13,(void **) &arg14, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj15,(void **) &arg16, SWIGTYPE_p_optimizers__logical,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj16,(void **) &arg17, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj17,(void **) &arg18, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers::setulb_((int const *)arg1,(int const *)arg2,arg3,(double const *)arg4,(double const *)arg5,(int const *)arg6,arg7,arg8,(double const *)arg9,(double const *)arg10,arg11,arg12,arg13,(int const *)arg14,arg15,arg16,arg17,arg18,arg19,arg20);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Minuit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Minuit *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Minuit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::Minuit *)new optimizers::Minuit(*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Minuit, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Minuit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Minuit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Minuit_find_min(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    int arg2 = (int) 0 ;
    double arg3 = (double) 1e-3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|id:Minuit_find_min",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->find_min(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Minuit_setMaxEval(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Minuit_setMaxEval",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMaxEval(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Minuit_getQuality(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Minuit_getQuality",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((optimizers::Minuit const *)arg1)->getQuality();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Minuit_getDistance(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Minuit_getDistance",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((optimizers::Minuit const *)arg1)->getDistance();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Minuit_getUncertainty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Minuit *arg1 = (optimizers::Minuit *) 0 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Minuit_getUncertainty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Minuit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::vector<double > &_result_ref = (arg1)->getUncertainty();
        result = (std::vector<double > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Minuit_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Minuit, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_fcn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    int *arg5 = (int *) 0 ;
    void *arg6 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:fcn",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers::fcn(arg1,arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mninit_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:mninit_",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mninit_((int const *)arg1,(int const *)arg2,(int const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnparm_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    char *arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int *arg7 = (int *) 0 ;
    ftnlen arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOOOOOl:mnparm_",&obj0,&arg2,&obj2,&obj3,&obj4,&obj5,&obj6,&arg8)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnparm_(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mncomd_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mfcn *arg1 = (mfcn *) 0 ;
    char *arg2 ;
    int *arg3 = (int *) 0 ;
    void *arg4 = (void *) 0 ;
    ftnlen arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOOl:mncomd_",&obj0,&arg2,&obj2,&obj3,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_mfcn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mncomd_(arg1,(char const *)arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnexcm_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mfcn *arg1 = (mfcn *) 0 ;
    char *arg2 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    void *arg6 = (void *) 0 ;
    ftnlen arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOOOOl:mnexcm_",&obj0,&arg2,&obj2,&obj3,&obj4,&obj5,&arg7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_mfcn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnexcm_(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnpout_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    char *arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int *arg7 = (int *) 0 ;
    ftnlen arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOOOOOl:mnpout_",&obj0,&arg2,&obj2,&obj3,&obj4,&obj5,&obj6,&arg8)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnpout_(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnstat_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int *arg6 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:mnstat_",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnstat_(arg1,arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnseti_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    ftnlen arg2 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sl:mnseti_",&arg1,&arg2)) goto fail;
    mnseti_(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnpars_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int *arg2 = (int *) 0 ;
    ftnlen arg3 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sOl:mnpars_",&arg1,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnpars_(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnemat_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:mnemat_",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnemat_(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mnerrs_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:mnerrs_",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mnerrs_(arg1,arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_mncont_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mfcn *arg1 = (mfcn *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int *arg7 = (int *) 0 ;
    void *arg8 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:mncont_",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_mfcn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj7,(void **) &arg8, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    mncont_(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_intrac_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    logical result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:intrac_",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (logical)intrac_(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Drmngb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Function *arg1 = 0 ;
    optimizers::Drmngb *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Drmngb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (optimizers::Drmngb *)new optimizers::Drmngb(*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Drmngb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Drmngb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Drmngb *arg1 = (optimizers::Drmngb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Drmngb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Drmngb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Drmngb_find_min(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Drmngb *arg1 = (optimizers::Drmngb *) 0 ;
    int arg2 = (int) 0 ;
    double arg3 = (double) 1e-8 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|id:Drmngb_find_min",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Drmngb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->find_min(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Drmngb_getUncertainty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Drmngb *arg1 = (optimizers::Drmngb *) 0 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Drmngb_getUncertainty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Drmngb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::vector<double > &_result_ref = (arg1)->getUncertainty();
        result = (std::vector<double > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Drmngb_getRetCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Drmngb *arg1 = (optimizers::Drmngb *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Drmngb_getRetCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Drmngb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((optimizers::Drmngb const *)arg1)->getRetCode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Drmngb_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Drmngb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_drmngb_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    int *arg5 = (int *) 0 ;
    int *arg6 = (int *) 0 ;
    int *arg7 = (int *) 0 ;
    int *arg8 = (int *) 0 ;
    double *arg9 = (double *) 0 ;
    double *arg10 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:drmngb_",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj7,(void **) &arg8, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj8,(void **) &arg9, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj9,(void **) &arg10, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers::drmngb_((double const *)arg1,arg2,arg3,arg4,arg5,(int const *)arg6,(int const *)arg7,(int const *)arg8,arg9,arg10);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_divset_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    double *arg5 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:divset_",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers::divset_((int const *)arg1,arg2,(int const *)arg3,(int const *)arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dpptri_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int *arg2 = (int *) 0 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    int arg5 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sOOOi:dpptri_",&arg1,&obj1,&obj2,&obj3,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    optimizers::dpptri_((char const *)arg1,(int const *)arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AbsEdge__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::AbsEdge *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AbsEdge")) goto fail;
    result = (optimizers::AbsEdge *)new optimizers::AbsEdge();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__AbsEdge, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AbsEdge__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 = (double) -3 ;
    optimizers::AbsEdge *result;
    
    if(!PyArg_ParseTuple(args,(char *)"dd|d:new_AbsEdge",&arg1,&arg2,&arg3)) goto fail;
    result = (optimizers::AbsEdge *)new optimizers::AbsEdge(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__AbsEdge, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AbsEdge(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AbsEdge__SWIG_0(self,args);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_AbsEdge__SWIG_1(self,args);
                }
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_AbsEdge__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_AbsEdge'");
    return NULL;
}


static PyObject *_wrap_AbsEdge_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::AbsEdge *arg1 = (optimizers::AbsEdge *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AbsEdge_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__AbsEdge,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::AbsEdge const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AbsEdge_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::AbsEdge *arg1 = (optimizers::AbsEdge *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AbsEdge_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__AbsEdge,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::AbsEdge const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AbsEdge_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::AbsEdge *arg1 = (optimizers::AbsEdge *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AbsEdge_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__AbsEdge,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::AbsEdge const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_AbsEdge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::AbsEdge *arg1 = (optimizers::AbsEdge *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AbsEdge",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__AbsEdge,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AbsEdge_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__AbsEdge, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Gaussian__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Gaussian")) goto fail;
    result = (optimizers::Gaussian *)new optimizers::Gaussian();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Gaussian, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Gaussian__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    optimizers::Gaussian *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ddd:new_Gaussian",&arg1,&arg2,&arg3)) goto fail;
    result = (optimizers::Gaussian *)new optimizers::Gaussian(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Gaussian, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Gaussian(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Gaussian__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_Gaussian__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Gaussian'");
    return NULL;
}


static PyObject *_wrap_Gaussian_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *arg1 = (optimizers::Gaussian *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Gaussian_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Gaussian,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Gaussian const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Gaussian_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *arg1 = (optimizers::Gaussian *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Gaussian_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Gaussian,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::Gaussian const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Gaussian_integral(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *arg1 = (optimizers::Gaussian *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    optimizers::Arg *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Gaussian_integral",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Gaussian,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Gaussian const *)arg1)->integral(*arg2,*arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Gaussian_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *arg1 = (optimizers::Gaussian *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Gaussian_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Gaussian,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::Gaussian const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Gaussian(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Gaussian *arg1 = (optimizers::Gaussian *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Gaussian",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Gaussian,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Gaussian_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Gaussian, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MyFun(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::MyFun *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MyFun")) goto fail;
    result = (optimizers::MyFun *)new optimizers::MyFun();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__MyFun, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MyFun(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::MyFun *arg1 = (optimizers::MyFun *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MyFun",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__MyFun,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MyFun_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::MyFun *arg1 = (optimizers::MyFun *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MyFun_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__MyFun,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::MyFun const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MyFun_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::MyFun *arg1 = (optimizers::MyFun *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MyFun_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__MyFun,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::MyFun const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MyFun_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__MyFun, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PowerLaw__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PowerLaw")) goto fail;
    result = (optimizers::PowerLaw *)new optimizers::PowerLaw();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__PowerLaw, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PowerLaw__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    optimizers::PowerLaw *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ddd:new_PowerLaw",&arg1,&arg2,&arg3)) goto fail;
    result = (optimizers::PowerLaw *)new optimizers::PowerLaw(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__PowerLaw, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PowerLaw(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_PowerLaw__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_PowerLaw__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_PowerLaw'");
    return NULL;
}


static PyObject *_wrap_PowerLaw_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *arg1 = (optimizers::PowerLaw *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PowerLaw_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__PowerLaw,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::PowerLaw const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PowerLaw_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *arg1 = (optimizers::PowerLaw *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:PowerLaw_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__PowerLaw,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::PowerLaw const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PowerLaw_integral(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *arg1 = (optimizers::PowerLaw *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    optimizers::Arg *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:PowerLaw_integral",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__PowerLaw,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::PowerLaw const *)arg1)->integral(*arg2,*arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PowerLaw_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *arg1 = (optimizers::PowerLaw *) 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PowerLaw_clone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__PowerLaw,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (optimizers::Function *)((optimizers::PowerLaw const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PowerLaw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::PowerLaw *arg1 = (optimizers::PowerLaw *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PowerLaw",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__PowerLaw,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PowerLaw_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__PowerLaw, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Rosen__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Rosen *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Rosen")) goto fail;
    result = (optimizers::Rosen *)new optimizers::Rosen();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Rosen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rosen__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    optimizers::Rosen *result;
    
    if(!PyArg_ParseTuple(args,(char *)"d:new_Rosen",&arg1)) goto fail;
    result = (optimizers::Rosen *)new optimizers::Rosen(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Rosen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rosen(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Rosen__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_Rosen__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Rosen'");
    return NULL;
}


static PyObject *_wrap_Rosen_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Rosen *arg1 = (optimizers::Rosen *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rosen_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Rosen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)((optimizers::Rosen const *)arg1)->value(*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rosen_derivByParam(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Rosen *arg1 = (optimizers::Rosen *) 0 ;
    optimizers::Arg *arg2 = 0 ;
    std::string *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Rosen_derivByParam",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Rosen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_optimizers__Arg,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (double)((optimizers::Rosen const *)arg1)->derivByParam(*arg2,(std::string const &)*arg3);
        
    }
    catch(optimizers::ParameterNotFound &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::ParameterNotFound");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Rosen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::Rosen *arg1 = (optimizers::Rosen *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Rosen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__Rosen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Rosen_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__Rosen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FunctionFactory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FunctionFactory")) goto fail;
    result = (optimizers::FunctionFactory *)new optimizers::FunctionFactory();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__FunctionFactory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FunctionFactory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FunctionFactory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_create__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    std::string *arg2 = 0 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FunctionFactory_create",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        result = (optimizers::Function *)(arg1)->create((std::string const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_addFunc__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    std::string *arg2 = 0 ;
    optimizers::Function *arg3 = (optimizers::Function *) 0 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:FunctionFactory_addFunc",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    try {
        (arg1)->addFunc((std::string const &)*arg2,arg3,arg4);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_listFunctions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FunctionFactory_listFunctions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->listFunctions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_readXml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FunctionFactory_readXml",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->readXml((std::string const &)*arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_create__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    char *arg2 ;
    optimizers::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:FunctionFactory_create",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        result = (optimizers::Function *)optimizers_FunctionFactory_create__SWIG_1(arg1,arg2);
        
    }
    catch(optimizers::Exception &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"optimizers::Exception");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_optimizers__Function, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_create(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__FunctionFactory, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_FunctionFactory_create__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__FunctionFactory, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_FunctionFactory_create__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'FunctionFactory_create'");
    return NULL;
}


static PyObject *_wrap_FunctionFactory_addFunc__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    optimizers::FunctionFactory *arg1 = (optimizers::FunctionFactory *) 0 ;
    char *arg2 ;
    optimizers::Function *arg3 = (optimizers::Function *) 0 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO|O:FunctionFactory_addFunc",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_optimizers__FunctionFactory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_optimizers__Function,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    optimizers_FunctionFactory_addFunc__SWIG_1(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FunctionFactory_addFunc(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__FunctionFactory, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_FunctionFactory_addFunc__SWIG_0(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_FunctionFactory_addFunc__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_optimizers__FunctionFactory, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_optimizers__Function, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_FunctionFactory_addFunc__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_FunctionFactory_addFunc__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'FunctionFactory_addFunc'");
    return NULL;
}


static PyObject * FunctionFactory_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_optimizers__FunctionFactory, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_DoubleVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<double > *)new std::vector<double >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    double *arg2 = 0 ;
    std::vector<double > *result;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (double) PyFloat_AsDouble(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (std::vector<double > *)new std::vector<double >(arg1,(double const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = 0 ;
    std::vector<double > *result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<double > *)new std::vector<double >((std::vector<double > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_DoubleVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_DoubleVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (SwigNumber_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            }else {
                /* wrapped vector? */
                std::vector<double >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTdouble_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_DoubleVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_DoubleVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_DoubleVector'");
    return NULL;
}


static PyObject *_wrap_DoubleVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    unsigned int result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<double > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    bool result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<double > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:DoubleVector_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (double)std_vectorldouble_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (double)std_vectorldouble_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorldouble_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<double > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oid:DoubleVector___setitem__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorldouble_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<double > *arg4 = 0 ;
    std::vector<double > temp4 ;
    std::vector<double > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:DoubleVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<double >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (SwigNumber_Check(o)) {
                    temp4[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    std_vectorldouble_g___setslice_____(arg1,arg2,arg3,(std::vector<double > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorldouble_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorldouble_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DoubleVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DoubleVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DoubleVectorVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<std::vector<double > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_DoubleVectorVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<std::vector<double > > *)new std::vector<std::vector<double > >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVectorVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    std::vector<double > *arg2 = 0 ;
    std::vector<std::vector<double > > *result;
    std::vector<double > temp2 ;
    std::vector<double > *v2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVectorVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<double >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<std::vector<double > > *)new std::vector<std::vector<double > >(arg1,(std::vector<double > const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVectorVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = 0 ;
    std::vector<std::vector<double > > *result;
    std::vector<std::vector<double > > temp1 ;
    std::vector<std::vector<double > > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DoubleVectorVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::vector<double > >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                std::vector<double >* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_std__vectorTdouble_t,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::vector<(double)>""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,0) != -1) {
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "std::vector<(double)>" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<std::vector<double > > *)new std::vector<std::vector<double > >((std::vector<std::vector<double > > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVectorVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_DoubleVectorVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_DoubleVectorVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    std::vector<double >* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_std__vectorTdouble_t,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            }else {
                /* wrapped vector? */
                std::vector<std::vector<double > >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_DoubleVectorVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                /* native sequence? */
                if (PyTuple_Check(argv[1]) || PyList_Check(argv[1])) {
                    unsigned int size = (PyTuple_Check(argv[1]) ?
                    PyTuple_Size(argv[1]) :
                    PyList_Size(argv[1]));
                    if (size == 0) {
                        /* an empty sequence can be of any type */
                        _v = 1;
                    }else {
                        /* check the first element only */
                        PyObject* o = PySequence_GetItem(argv[1],0);
                        if (SwigNumber_Check(o))
                        _v = 1;
                        else
                        _v = 0;
                        Py_DECREF(o);
                    }
                }else {
                    /* wrapped vector? */
                    std::vector<double >* v;
                    if (SWIG_ConvertPtr(argv[1],(void **) &v, 
                    SWIGTYPE_p_std__vectorTdouble_t,0) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }
            if (_v) {
                return _wrap_new_DoubleVectorVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_DoubleVectorVector'");
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    unsigned int result;
    std::vector<std::vector<double > > temp1 ;
    std::vector<std::vector<double > > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVectorVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::vector<double > >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                std::vector<double >* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_std__vectorTdouble_t,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::vector<(double)>""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,0) != -1) {
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "std::vector<(double)>" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<std::vector<double > > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVectorVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    std::vector<double > *arg2 = 0 ;
    std::vector<double > temp2 ;
    std::vector<double > *v2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DoubleVectorVector_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<double >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->push_back((std::vector<double > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVectorVector___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlstd_vectorldouble_g_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    std::vector<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVectorVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_vectorldouble_g_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<double > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVectorVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                std::vector<double > &_result_ref = std_vectorlstd_vectorldouble_g_g___getitem_____(arg1,arg2);
                result = (std::vector<double > *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::vector<double > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVectorVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlstd_vectorldouble_g_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            std::vector<double >* ptr = new std::vector<double >(((std::vector<std::vector<double > > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_std__vectorTdouble_t, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    std::vector<double > *arg3 = 0 ;
    std::vector<double > temp3 ;
    std::vector<double > *v3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:DoubleVectorVector___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj2) || PyList_Check(obj2)) {
            unsigned int size = (PyTuple_Check(obj2) ?
            PyTuple_Size(obj2) :
            PyList_Size(obj2));
            temp3 = std::vector<double >(size);
            arg3 = &temp3;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj2,i);
                if (SwigNumber_Check(o)) {
                    temp3[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj2,(void **) &v3, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg3 = v3;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    {
        try {
            std_vectorlstd_vectorldouble_g_g___setitem_____(arg1,arg2,(std::vector<double > const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::vector<double > > *arg4 = 0 ;
    std::vector<std::vector<double > > temp4 ;
    std::vector<std::vector<double > > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:DoubleVectorVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<std::vector<double > >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                std::vector<double >* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_std__vectorTdouble_t,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::vector<(double)>""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,0) != -1) {
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "std::vector<(double)>" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlstd_vectorldouble_g_g___setslice_____(arg1,arg2,arg3,(std::vector<std::vector<double > > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVectorVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlstd_vectorldouble_g_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVectorVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVectorVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlstd_vectorldouble_g_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DoubleVectorVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::vector<double > > *arg1 = (std::vector<std::vector<double > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVectorVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DoubleVectorVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__vectorTdouble_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StringVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_StringVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    std::string *arg2 = 0 ;
    std::vector<std::string > *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_StringVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = 0 ;
    std::vector<std::string > *result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_StringVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_StringVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (PyString_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            }else {
                /* wrapped vector? */
                std::vector<std::string >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTstd__string_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_StringVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_StringVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_StringVector'");
    return NULL;
}


static PyObject *_wrap_StringVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    unsigned int result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<std::string > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringVector_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = std::string(PyString_AsString(obj1));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:StringVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:StringVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlstd_string_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:StringVector___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2))
        arg3 = std::string(PyString_AsString(obj2));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            std_vectorlstd_string_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::string > *arg4 = 0 ;
    std::vector<std::string > temp4 ;
    std::vector<std::string > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:StringVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<std::string >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (PyString_Check(o)) {
                    temp4[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlstd_string_g___setslice_____(arg1,arg2,arg3,(std::vector<std::string > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:StringVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlstd_string_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:StringVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlstd_string_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StringVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StringVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StringVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__string_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_Arg", _wrap_new_Arg, METH_VARARGS },
	 { (char *)"delete_Arg", _wrap_delete_Arg, METH_VARARGS },
	 { (char *)"Arg_swigregister", Arg_swigregister, METH_VARARGS },
	 { (char *)"new_dArg", _wrap_new_dArg, METH_VARARGS },
	 { (char *)"delete_dArg", _wrap_delete_dArg, METH_VARARGS },
	 { (char *)"dArg_getValue", _wrap_dArg_getValue, METH_VARARGS },
	 { (char *)"dArg_swigregister", dArg_swigregister, METH_VARARGS },
	 { (char *)"new_Exception", _wrap_new_Exception, METH_VARARGS },
	 { (char *)"delete_Exception", _wrap_delete_Exception, METH_VARARGS },
	 { (char *)"Exception_what", _wrap_Exception_what, METH_VARARGS },
	 { (char *)"Exception_code", _wrap_Exception_code, METH_VARARGS },
	 { (char *)"Exception_swigregister", Exception_swigregister, METH_VARARGS },
	 { (char *)"new_OutOfBounds", _wrap_new_OutOfBounds, METH_VARARGS },
	 { (char *)"delete_OutOfBounds", _wrap_delete_OutOfBounds, METH_VARARGS },
	 { (char *)"OutOfBounds_value", _wrap_OutOfBounds_value, METH_VARARGS },
	 { (char *)"OutOfBounds_minValue", _wrap_OutOfBounds_minValue, METH_VARARGS },
	 { (char *)"OutOfBounds_maxValue", _wrap_OutOfBounds_maxValue, METH_VARARGS },
	 { (char *)"OutOfBounds_swigregister", OutOfBounds_swigregister, METH_VARARGS },
	 { (char *)"new_ParameterNotFound", _wrap_new_ParameterNotFound, METH_VARARGS },
	 { (char *)"delete_ParameterNotFound", _wrap_delete_ParameterNotFound, METH_VARARGS },
	 { (char *)"ParameterNotFound_swigregister", ParameterNotFound_swigregister, METH_VARARGS },
	 { (char *)"new_Parameter", _wrap_new_Parameter, METH_VARARGS },
	 { (char *)"delete_Parameter", _wrap_delete_Parameter, METH_VARARGS },
	 { (char *)"Parameter_setName", _wrap_Parameter_setName, METH_VARARGS },
	 { (char *)"Parameter_getName", _wrap_Parameter_getName, METH_VARARGS },
	 { (char *)"Parameter_setValue", _wrap_Parameter_setValue, METH_VARARGS },
	 { (char *)"Parameter_getValue", _wrap_Parameter_getValue, METH_VARARGS },
	 { (char *)"Parameter_setScale", _wrap_Parameter_setScale, METH_VARARGS },
	 { (char *)"Parameter_getScale", _wrap_Parameter_getScale, METH_VARARGS },
	 { (char *)"Parameter_setTrueValue", _wrap_Parameter_setTrueValue, METH_VARARGS },
	 { (char *)"Parameter_getTrueValue", _wrap_Parameter_getTrueValue, METH_VARARGS },
	 { (char *)"Parameter_setBounds", _wrap_Parameter_setBounds, METH_VARARGS },
	 { (char *)"Parameter_getBounds", _wrap_Parameter_getBounds, METH_VARARGS },
	 { (char *)"Parameter_setFree", _wrap_Parameter_setFree, METH_VARARGS },
	 { (char *)"Parameter_isFree", _wrap_Parameter_isFree, METH_VARARGS },
	 { (char *)"Parameter_swigregister", Parameter_swigregister, METH_VARARGS },
	 { (char *)"delete_Function", _wrap_delete_Function, METH_VARARGS },
	 { (char *)"Function_setName", _wrap_Function_setName, METH_VARARGS },
	 { (char *)"Function_getName", _wrap_Function_getName, METH_VARARGS },
	 { (char *)"Function_setParam", _wrap_Function_setParam, METH_VARARGS },
	 { (char *)"Function_getParamValue", _wrap_Function_getParamValue, METH_VARARGS },
	 { (char *)"Function_setParamScale", _wrap_Function_setParamScale, METH_VARARGS },
	 { (char *)"Function_setParamTrueValue", _wrap_Function_setParamTrueValue, METH_VARARGS },
	 { (char *)"Function_getNumParams", _wrap_Function_getNumParams, METH_VARARGS },
	 { (char *)"Function_setParamValues", _wrap_Function_setParamValues, METH_VARARGS },
	 { (char *)"Function_setParamValues_", _wrap_Function_setParamValues_, METH_VARARGS },
	 { (char *)"Function_setParams", _wrap_Function_setParams, METH_VARARGS },
	 { (char *)"Function_getParamNames", _wrap_Function_getParamNames, METH_VARARGS },
	 { (char *)"Function_getParamValues", _wrap_Function_getParamValues, METH_VARARGS },
	 { (char *)"Function_getParams", _wrap_Function_getParams, METH_VARARGS },
	 { (char *)"Function_getNumFreeParams", _wrap_Function_getNumFreeParams, METH_VARARGS },
	 { (char *)"Function_setFreeParamValues", _wrap_Function_setFreeParamValues, METH_VARARGS },
	 { (char *)"Function_setFreeParamValues_", _wrap_Function_setFreeParamValues_, METH_VARARGS },
	 { (char *)"Function_getFreeParamNames", _wrap_Function_getFreeParamNames, METH_VARARGS },
	 { (char *)"Function_getFreeParamValues", _wrap_Function_getFreeParamValues, METH_VARARGS },
	 { (char *)"Function_getFreeParams", _wrap_Function_getFreeParams, METH_VARARGS },
	 { (char *)"Function_setFreeParams", _wrap_Function_setFreeParams, METH_VARARGS },
	 { (char *)"Function_value", _wrap_Function_value, METH_VARARGS },
	 { (char *)"Function___call__", _wrap_Function___call__, METH_VARARGS },
	 { (char *)"Function_derivByParam", _wrap_Function_derivByParam, METH_VARARGS },
	 { (char *)"Function_getDerivs", _wrap_Function_getDerivs, METH_VARARGS },
	 { (char *)"Function_getFreeDerivs", _wrap_Function_getFreeDerivs, METH_VARARGS },
	 { (char *)"Function_integral", _wrap_Function_integral, METH_VARARGS },
	 { (char *)"Function_clone", _wrap_Function_clone, METH_VARARGS },
	 { (char *)"Function_funcType", _wrap_Function_funcType, METH_VARARGS },
	 { (char *)"Function_argType", _wrap_Function_argType, METH_VARARGS },
	 { (char *)"Function_setParamBounds", _wrap_Function_setParamBounds, METH_VARARGS },
	 { (char *)"Function_getParam", _wrap_Function_getParam, METH_VARARGS },
	 { (char *)"Function_string", _wrap_Function_string, METH_VARARGS },
	 { (char *)"Function_swigregister", Function_swigregister, METH_VARARGS },
	 { (char *)"delete_CompositeFunction", _wrap_delete_CompositeFunction, METH_VARARGS },
	 { (char *)"CompositeFunction_setParam", _wrap_CompositeFunction_setParam, METH_VARARGS },
	 { (char *)"CompositeFunction_setParamValues_", _wrap_CompositeFunction_setParamValues_, METH_VARARGS },
	 { (char *)"CompositeFunction_setFreeParamValues_", _wrap_CompositeFunction_setFreeParamValues_, METH_VARARGS },
	 { (char *)"CompositeFunction_getParam", _wrap_CompositeFunction_getParam, METH_VARARGS },
	 { (char *)"CompositeFunction_swigregister", CompositeFunction_swigregister, METH_VARARGS },
	 { (char *)"new_ProductFunction", _wrap_new_ProductFunction, METH_VARARGS },
	 { (char *)"ProductFunction_value", _wrap_ProductFunction_value, METH_VARARGS },
	 { (char *)"ProductFunction_clone", _wrap_ProductFunction_clone, METH_VARARGS },
	 { (char *)"delete_ProductFunction", _wrap_delete_ProductFunction, METH_VARARGS },
	 { (char *)"ProductFunction_swigregister", ProductFunction_swigregister, METH_VARARGS },
	 { (char *)"new_SumFunction", _wrap_new_SumFunction, METH_VARARGS },
	 { (char *)"SumFunction_value", _wrap_SumFunction_value, METH_VARARGS },
	 { (char *)"SumFunction_integral", _wrap_SumFunction_integral, METH_VARARGS },
	 { (char *)"SumFunction_clone", _wrap_SumFunction_clone, METH_VARARGS },
	 { (char *)"delete_SumFunction", _wrap_delete_SumFunction, METH_VARARGS },
	 { (char *)"SumFunction_swigregister", SumFunction_swigregister, METH_VARARGS },
	 { (char *)"new_FunctionTest", _wrap_new_FunctionTest, METH_VARARGS },
	 { (char *)"delete_FunctionTest", _wrap_delete_FunctionTest, METH_VARARGS },
	 { (char *)"FunctionTest_parameters", _wrap_FunctionTest_parameters, METH_VARARGS },
	 { (char *)"FunctionTest_freeParameters", _wrap_FunctionTest_freeParameters, METH_VARARGS },
	 { (char *)"FunctionTest_funcEvaluations", _wrap_FunctionTest_funcEvaluations, METH_VARARGS },
	 { (char *)"FunctionTest_derivatives", _wrap_FunctionTest_derivatives, METH_VARARGS },
	 { (char *)"FunctionTest_swigregister", FunctionTest_swigregister, METH_VARARGS },
	 { (char *)"new_Mcmc", _wrap_new_Mcmc, METH_VARARGS },
	 { (char *)"delete_Mcmc", _wrap_delete_Mcmc, METH_VARARGS },
	 { (char *)"Mcmc_addPriors", _wrap_Mcmc_addPriors, METH_VARARGS },
	 { (char *)"Mcmc_generateSamples", _wrap_Mcmc_generateSamples, METH_VARARGS },
	 { (char *)"Mcmc_setTransitionWidths", _wrap_Mcmc_setTransitionWidths, METH_VARARGS },
	 { (char *)"Mcmc_getTransitionWidths", _wrap_Mcmc_getTransitionWidths, METH_VARARGS },
	 { (char *)"Mcmc_writeSamples", _wrap_Mcmc_writeSamples, METH_VARARGS },
	 { (char *)"Mcmc_swigregister", Mcmc_swigregister, METH_VARARGS },
	 { (char *)"delete_Optimizer", _wrap_delete_Optimizer, METH_VARARGS },
	 { (char *)"Optimizer_find_min", _wrap_Optimizer_find_min, METH_VARARGS },
	 { (char *)"Optimizer_swigregister", Optimizer_swigregister, METH_VARARGS },
	 { (char *)"new_Lbfgs", _wrap_new_Lbfgs, METH_VARARGS },
	 { (char *)"delete_Lbfgs", _wrap_delete_Lbfgs, METH_VARARGS },
	 { (char *)"Lbfgs_setMaxVarMetCorr", _wrap_Lbfgs_setMaxVarMetCorr, METH_VARARGS },
	 { (char *)"Lbfgs_setPgtol", _wrap_Lbfgs_setPgtol, METH_VARARGS },
	 { (char *)"Lbfgs_setMaxIterations", _wrap_Lbfgs_setMaxIterations, METH_VARARGS },
	 { (char *)"Lbfgs_getRetCode", _wrap_Lbfgs_getRetCode, METH_VARARGS },
	 { (char *)"Lbfgs_getErrorString", _wrap_Lbfgs_getErrorString, METH_VARARGS },
	 { (char *)"Lbfgs_find_min", _wrap_Lbfgs_find_min, METH_VARARGS },
	 { (char *)"Lbfgs_swigregister", Lbfgs_swigregister, METH_VARARGS },
	 { (char *)"setulb_", _wrap_setulb_, METH_VARARGS },
	 { (char *)"new_Minuit", _wrap_new_Minuit, METH_VARARGS },
	 { (char *)"delete_Minuit", _wrap_delete_Minuit, METH_VARARGS },
	 { (char *)"Minuit_find_min", _wrap_Minuit_find_min, METH_VARARGS },
	 { (char *)"Minuit_setMaxEval", _wrap_Minuit_setMaxEval, METH_VARARGS },
	 { (char *)"Minuit_getQuality", _wrap_Minuit_getQuality, METH_VARARGS },
	 { (char *)"Minuit_getDistance", _wrap_Minuit_getDistance, METH_VARARGS },
	 { (char *)"Minuit_getUncertainty", _wrap_Minuit_getUncertainty, METH_VARARGS },
	 { (char *)"Minuit_swigregister", Minuit_swigregister, METH_VARARGS },
	 { (char *)"fcn", _wrap_fcn, METH_VARARGS },
	 { (char *)"mninit_", _wrap_mninit_, METH_VARARGS },
	 { (char *)"mnparm_", _wrap_mnparm_, METH_VARARGS },
	 { (char *)"mncomd_", _wrap_mncomd_, METH_VARARGS },
	 { (char *)"mnexcm_", _wrap_mnexcm_, METH_VARARGS },
	 { (char *)"mnpout_", _wrap_mnpout_, METH_VARARGS },
	 { (char *)"mnstat_", _wrap_mnstat_, METH_VARARGS },
	 { (char *)"mnseti_", _wrap_mnseti_, METH_VARARGS },
	 { (char *)"mnpars_", _wrap_mnpars_, METH_VARARGS },
	 { (char *)"mnemat_", _wrap_mnemat_, METH_VARARGS },
	 { (char *)"mnerrs_", _wrap_mnerrs_, METH_VARARGS },
	 { (char *)"mncont_", _wrap_mncont_, METH_VARARGS },
	 { (char *)"intrac_", _wrap_intrac_, METH_VARARGS },
	 { (char *)"new_Drmngb", _wrap_new_Drmngb, METH_VARARGS },
	 { (char *)"delete_Drmngb", _wrap_delete_Drmngb, METH_VARARGS },
	 { (char *)"Drmngb_find_min", _wrap_Drmngb_find_min, METH_VARARGS },
	 { (char *)"Drmngb_getUncertainty", _wrap_Drmngb_getUncertainty, METH_VARARGS },
	 { (char *)"Drmngb_getRetCode", _wrap_Drmngb_getRetCode, METH_VARARGS },
	 { (char *)"Drmngb_swigregister", Drmngb_swigregister, METH_VARARGS },
	 { (char *)"drmngb_", _wrap_drmngb_, METH_VARARGS },
	 { (char *)"divset_", _wrap_divset_, METH_VARARGS },
	 { (char *)"dpptri_", _wrap_dpptri_, METH_VARARGS },
	 { (char *)"new_AbsEdge", _wrap_new_AbsEdge, METH_VARARGS },
	 { (char *)"AbsEdge_value", _wrap_AbsEdge_value, METH_VARARGS },
	 { (char *)"AbsEdge_derivByParam", _wrap_AbsEdge_derivByParam, METH_VARARGS },
	 { (char *)"AbsEdge_clone", _wrap_AbsEdge_clone, METH_VARARGS },
	 { (char *)"delete_AbsEdge", _wrap_delete_AbsEdge, METH_VARARGS },
	 { (char *)"AbsEdge_swigregister", AbsEdge_swigregister, METH_VARARGS },
	 { (char *)"new_Gaussian", _wrap_new_Gaussian, METH_VARARGS },
	 { (char *)"Gaussian_value", _wrap_Gaussian_value, METH_VARARGS },
	 { (char *)"Gaussian_derivByParam", _wrap_Gaussian_derivByParam, METH_VARARGS },
	 { (char *)"Gaussian_integral", _wrap_Gaussian_integral, METH_VARARGS },
	 { (char *)"Gaussian_clone", _wrap_Gaussian_clone, METH_VARARGS },
	 { (char *)"delete_Gaussian", _wrap_delete_Gaussian, METH_VARARGS },
	 { (char *)"Gaussian_swigregister", Gaussian_swigregister, METH_VARARGS },
	 { (char *)"new_MyFun", _wrap_new_MyFun, METH_VARARGS },
	 { (char *)"delete_MyFun", _wrap_delete_MyFun, METH_VARARGS },
	 { (char *)"MyFun_value", _wrap_MyFun_value, METH_VARARGS },
	 { (char *)"MyFun_derivByParam", _wrap_MyFun_derivByParam, METH_VARARGS },
	 { (char *)"MyFun_swigregister", MyFun_swigregister, METH_VARARGS },
	 { (char *)"new_PowerLaw", _wrap_new_PowerLaw, METH_VARARGS },
	 { (char *)"PowerLaw_value", _wrap_PowerLaw_value, METH_VARARGS },
	 { (char *)"PowerLaw_derivByParam", _wrap_PowerLaw_derivByParam, METH_VARARGS },
	 { (char *)"PowerLaw_integral", _wrap_PowerLaw_integral, METH_VARARGS },
	 { (char *)"PowerLaw_clone", _wrap_PowerLaw_clone, METH_VARARGS },
	 { (char *)"delete_PowerLaw", _wrap_delete_PowerLaw, METH_VARARGS },
	 { (char *)"PowerLaw_swigregister", PowerLaw_swigregister, METH_VARARGS },
	 { (char *)"new_Rosen", _wrap_new_Rosen, METH_VARARGS },
	 { (char *)"Rosen_value", _wrap_Rosen_value, METH_VARARGS },
	 { (char *)"Rosen_derivByParam", _wrap_Rosen_derivByParam, METH_VARARGS },
	 { (char *)"delete_Rosen", _wrap_delete_Rosen, METH_VARARGS },
	 { (char *)"Rosen_swigregister", Rosen_swigregister, METH_VARARGS },
	 { (char *)"new_FunctionFactory", _wrap_new_FunctionFactory, METH_VARARGS },
	 { (char *)"delete_FunctionFactory", _wrap_delete_FunctionFactory, METH_VARARGS },
	 { (char *)"FunctionFactory_listFunctions", _wrap_FunctionFactory_listFunctions, METH_VARARGS },
	 { (char *)"FunctionFactory_readXml", _wrap_FunctionFactory_readXml, METH_VARARGS },
	 { (char *)"FunctionFactory_create", _wrap_FunctionFactory_create, METH_VARARGS },
	 { (char *)"FunctionFactory_addFunc", _wrap_FunctionFactory_addFunc, METH_VARARGS },
	 { (char *)"FunctionFactory_swigregister", FunctionFactory_swigregister, METH_VARARGS },
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS },
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS },
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS },
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS },
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS },
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS },
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS },
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS },
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS },
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS },
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS },
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS },
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS },
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS },
	 { (char *)"new_DoubleVectorVector", _wrap_new_DoubleVectorVector, METH_VARARGS },
	 { (char *)"DoubleVectorVector___len__", _wrap_DoubleVectorVector___len__, METH_VARARGS },
	 { (char *)"DoubleVectorVector_clear", _wrap_DoubleVectorVector_clear, METH_VARARGS },
	 { (char *)"DoubleVectorVector_append", _wrap_DoubleVectorVector_append, METH_VARARGS },
	 { (char *)"DoubleVectorVector___nonzero__", _wrap_DoubleVectorVector___nonzero__, METH_VARARGS },
	 { (char *)"DoubleVectorVector_pop", _wrap_DoubleVectorVector_pop, METH_VARARGS },
	 { (char *)"DoubleVectorVector___getitem__", _wrap_DoubleVectorVector___getitem__, METH_VARARGS },
	 { (char *)"DoubleVectorVector___getslice__", _wrap_DoubleVectorVector___getslice__, METH_VARARGS },
	 { (char *)"DoubleVectorVector___setitem__", _wrap_DoubleVectorVector___setitem__, METH_VARARGS },
	 { (char *)"DoubleVectorVector___setslice__", _wrap_DoubleVectorVector___setslice__, METH_VARARGS },
	 { (char *)"DoubleVectorVector___delitem__", _wrap_DoubleVectorVector___delitem__, METH_VARARGS },
	 { (char *)"DoubleVectorVector___delslice__", _wrap_DoubleVectorVector___delslice__, METH_VARARGS },
	 { (char *)"delete_DoubleVectorVector", _wrap_delete_DoubleVectorVector, METH_VARARGS },
	 { (char *)"DoubleVectorVector_swigregister", DoubleVectorVector_swigregister, METH_VARARGS },
	 { (char *)"new_StringVector", _wrap_new_StringVector, METH_VARARGS },
	 { (char *)"StringVector___len__", _wrap_StringVector___len__, METH_VARARGS },
	 { (char *)"StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_VARARGS },
	 { (char *)"StringVector_clear", _wrap_StringVector_clear, METH_VARARGS },
	 { (char *)"StringVector_append", _wrap_StringVector_append, METH_VARARGS },
	 { (char *)"StringVector_pop", _wrap_StringVector_pop, METH_VARARGS },
	 { (char *)"StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS },
	 { (char *)"StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS },
	 { (char *)"StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS },
	 { (char *)"StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS },
	 { (char *)"StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS },
	 { (char *)"StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS },
	 { (char *)"delete_StringVector", _wrap_delete_StringVector, METH_VARARGS },
	 { (char *)"StringVector_swigregister", StringVector_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_optimizers__DrmngbTo_p_optimizers__Optimizer(void *x) {
    return (void *)((optimizers::Optimizer *)  ((optimizers::Drmngb *) x));
}
static void *_p_optimizers__LbfgsTo_p_optimizers__Optimizer(void *x) {
    return (void *)((optimizers::Optimizer *)  ((optimizers::Lbfgs *) x));
}
static void *_p_optimizers__MinuitTo_p_optimizers__Optimizer(void *x) {
    return (void *)((optimizers::Optimizer *)  ((optimizers::Minuit *) x));
}
static void *_p_optimizers__ParameterNotFoundTo_p_optimizers__Exception(void *x) {
    return (void *)((optimizers::Exception *)  ((optimizers::ParameterNotFound *) x));
}
static void *_p_optimizers__OutOfBoundsTo_p_optimizers__Exception(void *x) {
    return (void *)((optimizers::Exception *)  ((optimizers::OutOfBounds *) x));
}
static void *_p_optimizers__dArgTo_p_optimizers__Arg(void *x) {
    return (void *)((optimizers::Arg *)  ((optimizers::dArg *) x));
}
static void *_p_optimizers__AbsEdgeTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::AbsEdge *) x));
}
static void *_p_optimizers__CompositeFunctionTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::CompositeFunction *) x));
}
static void *_p_optimizers__ProductFunctionTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *) (optimizers::CompositeFunction *) ((optimizers::ProductFunction *) x));
}
static void *_p_optimizers__SumFunctionTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *) (optimizers::CompositeFunction *) ((optimizers::SumFunction *) x));
}
static void *_p_optimizers__GaussianTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::Gaussian *) x));
}
static void *_p_optimizers__MyFunTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::MyFun *) x));
}
static void *_p_optimizers__RosenTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::Rosen *) x));
}
static void *_p_optimizers__PowerLawTo_p_optimizers__Function(void *x) {
    return (void *)((optimizers::Function *)  ((optimizers::PowerLaw *) x));
}
static void *_p_optimizers__ProductFunctionTo_p_optimizers__CompositeFunction(void *x) {
    return (void *)((optimizers::CompositeFunction *)  ((optimizers::ProductFunction *) x));
}
static void *_p_optimizers__SumFunctionTo_p_optimizers__CompositeFunction(void *x) {
    return (void *)((optimizers::CompositeFunction *)  ((optimizers::SumFunction *) x));
}
static swig_type_info _swigt__p_optimizers__FunctionFactory[] = {{"_p_optimizers__FunctionFactory", 0, "optimizers::FunctionFactory *", 0},{"_p_optimizers__FunctionFactory"},{0}};
static swig_type_info _swigt__p_optimizers__ParameterNotFound[] = {{"_p_optimizers__ParameterNotFound", 0, "optimizers::ParameterNotFound *", 0},{"_p_optimizers__ParameterNotFound"},{0}};
static swig_type_info _swigt__p_optimizers__Gaussian[] = {{"_p_optimizers__Gaussian", 0, "optimizers::Gaussian *", 0},{"_p_optimizers__Gaussian"},{0}};
static swig_type_info _swigt__p_std__vectorToptimizers__Function_p_t[] = {{"_p_std__vectorToptimizers__Function_p_t", 0, "std::vector<optimizers::Function * > *", 0},{"_p_std__vectorToptimizers__Function_p_t"},{0}};
static swig_type_info _swigt__p_optimizers__logical[] = {{"_p_optimizers__logical", 0, "optimizers::logical *", 0},{"_p_optimizers__logical"},{0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0},{"_p_double"},{0}};
static swig_type_info _swigt__p_optimizers__Lbfgs[] = {{"_p_optimizers__Lbfgs", 0, "optimizers::Lbfgs *", 0},{"_p_optimizers__Lbfgs"},{0}};
static swig_type_info _swigt__p_optimizers__FunctionTest[] = {{"_p_optimizers__FunctionTest", 0, "optimizers::FunctionTest *", 0},{"_p_optimizers__FunctionTest"},{0}};
static swig_type_info _swigt__p_std__vectorToptimizers__Parameter_t[] = {{"_p_std__vectorToptimizers__Parameter_t", 0, "std::vector<optimizers::Parameter > *", 0},{"_p_std__vectorToptimizers__Parameter_t"},{0}};
static swig_type_info _swigt__p_optimizers__Minuit[] = {{"_p_optimizers__Minuit", 0, "optimizers::Minuit *", 0},{"_p_optimizers__Minuit"},{0}};
static swig_type_info _swigt__p_std__vectorTdouble_t__const_iterator[] = {{"_p_std__vectorTdouble_t__const_iterator", 0, "std::vector<double >::const_iterator *", 0},{"_p_std__vectorTdouble_t__const_iterator"},{0}};
static swig_type_info _swigt__p_std__pairTdouble_double_t[] = {{"_p_std__pairTdouble_double_t", 0, "std::pair<double,double > *", 0},{"_p_std__pairTdouble_double_t"},{0}};
static swig_type_info _swigt__p_std__vectorTdouble_t[] = {{"_p_std__vectorTdouble_t", 0, "std::vector<double > *", 0},{"_p_std__vectorTdouble_t"},{0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0},{"_p_std__string"},{0}};
static swig_type_info _swigt__p_optimizers__Optimizer[] = {{"_p_optimizers__Optimizer", 0, "optimizers::Optimizer *", 0},{"_p_optimizers__Drmngb", _p_optimizers__DrmngbTo_p_optimizers__Optimizer},{"_p_optimizers__Lbfgs", _p_optimizers__LbfgsTo_p_optimizers__Optimizer},{"_p_optimizers__Minuit", _p_optimizers__MinuitTo_p_optimizers__Optimizer},{"_p_optimizers__Optimizer"},{0}};
static swig_type_info _swigt__p_std__vectorTstd__vectorTdouble_t_t[] = {{"_p_std__vectorTstd__vectorTdouble_t_t", 0, "std::vector<std::vector<double > > *", 0},{"_p_std__vectorTstd__vectorTdouble_t_t"},{0}};
static swig_type_info _swigt__p_optimizers__Exception[] = {{"_p_optimizers__Exception", 0, "optimizers::Exception *", 0},{"_p_optimizers__Exception"},{"_p_optimizers__ParameterNotFound", _p_optimizers__ParameterNotFoundTo_p_optimizers__Exception},{"_p_optimizers__OutOfBounds", _p_optimizers__OutOfBoundsTo_p_optimizers__Exception},{0}};
static swig_type_info _swigt__p_optimizers__Rosen[] = {{"_p_optimizers__Rosen", 0, "optimizers::Rosen *", 0},{"_p_optimizers__Rosen"},{0}};
static swig_type_info _swigt__p_std__vectorToptimizers__Arg_p_t[] = {{"_p_std__vectorToptimizers__Arg_p_t", 0, "std::vector<optimizers::Arg * > *", 0},{"_p_std__vectorToptimizers__Arg_p_t"},{0}};
static swig_type_info _swigt__p_mfcn[] = {{"_p_mfcn", 0, "mfcn *", 0},{"_p_mfcn"},{0}};
static swig_type_info _swigt__p_optimizers__Arg[] = {{"_p_optimizers__Arg", 0, "optimizers::Arg *", 0},{"_p_optimizers__dArg", _p_optimizers__dArgTo_p_optimizers__Arg},{"_p_optimizers__Arg"},{0}};
static swig_type_info _swigt__p_optimizers__dArg[] = {{"_p_optimizers__dArg", 0, "optimizers::dArg *", 0},{"_p_optimizers__dArg"},{0}};
static swig_type_info _swigt__p_optimizers__Parameter[] = {{"_p_optimizers__Parameter", 0, "optimizers::Parameter *", 0},{"_p_optimizers__Parameter"},{0}};
static swig_type_info _swigt__p_optimizers__OutOfBounds[] = {{"_p_optimizers__OutOfBounds", 0, "optimizers::OutOfBounds *", 0},{"_p_optimizers__OutOfBounds"},{0}};
static swig_type_info _swigt__p_optimizers__MyFun[] = {{"_p_optimizers__MyFun", 0, "optimizers::MyFun *", 0},{"_p_optimizers__MyFun"},{0}};
static swig_type_info _swigt__p_optimizers__PowerLaw[] = {{"_p_optimizers__PowerLaw", 0, "optimizers::PowerLaw *", 0},{"_p_optimizers__PowerLaw"},{0}};
static swig_type_info _swigt__p_optimizers__Mcmc[] = {{"_p_optimizers__Mcmc", 0, "optimizers::Mcmc *", 0},{"_p_optimizers__Mcmc"},{0}};
static swig_type_info _swigt__p_optimizers__SumFunction[] = {{"_p_optimizers__SumFunction", 0, "optimizers::SumFunction *", 0},{"_p_optimizers__SumFunction"},{0}};
static swig_type_info _swigt__p_optimizers__ProductFunction[] = {{"_p_optimizers__ProductFunction", 0, "optimizers::ProductFunction *", 0},{"_p_optimizers__ProductFunction"},{0}};
static swig_type_info _swigt__p_optimizers__Function[] = {{"_p_optimizers__Function", 0, "optimizers::Function *", 0},{"_p_optimizers__AbsEdge", _p_optimizers__AbsEdgeTo_p_optimizers__Function},{"_p_optimizers__Function"},{"_p_optimizers__CompositeFunction", _p_optimizers__CompositeFunctionTo_p_optimizers__Function},{"_p_optimizers__ProductFunction", _p_optimizers__ProductFunctionTo_p_optimizers__Function},{"_p_optimizers__SumFunction", _p_optimizers__SumFunctionTo_p_optimizers__Function},{"_p_optimizers__Gaussian", _p_optimizers__GaussianTo_p_optimizers__Function},{"_p_optimizers__MyFun", _p_optimizers__MyFunTo_p_optimizers__Function},{"_p_optimizers__Rosen", _p_optimizers__RosenTo_p_optimizers__Function},{"_p_optimizers__PowerLaw", _p_optimizers__PowerLawTo_p_optimizers__Function},{0}};
static swig_type_info _swigt__p_optimizers__CompositeFunction[] = {{"_p_optimizers__CompositeFunction", 0, "optimizers::CompositeFunction *", 0},{"_p_optimizers__CompositeFunction"},{"_p_optimizers__ProductFunction", _p_optimizers__ProductFunctionTo_p_optimizers__CompositeFunction},{"_p_optimizers__SumFunction", _p_optimizers__SumFunctionTo_p_optimizers__CompositeFunction},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};
static swig_type_info _swigt__p_optimizers__AbsEdge[] = {{"_p_optimizers__AbsEdge", 0, "optimizers::AbsEdge *", 0},{"_p_optimizers__AbsEdge"},{0}};
static swig_type_info _swigt__p_std__vectorTstd__string_t[] = {{"_p_std__vectorTstd__string_t", 0, "std::vector<std::string > *", 0},{"_p_std__vectorTstd__string_t"},{0}};
static swig_type_info _swigt__p_optimizers__Drmngb[] = {{"_p_optimizers__Drmngb", 0, "optimizers::Drmngb *", 0},{"_p_optimizers__Drmngb"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_optimizers__FunctionFactory, 
_swigt__p_optimizers__ParameterNotFound, 
_swigt__p_optimizers__Gaussian, 
_swigt__p_std__vectorToptimizers__Function_p_t, 
_swigt__p_optimizers__logical, 
_swigt__p_double, 
_swigt__p_optimizers__Lbfgs, 
_swigt__p_optimizers__FunctionTest, 
_swigt__p_std__vectorToptimizers__Parameter_t, 
_swigt__p_optimizers__Minuit, 
_swigt__p_std__vectorTdouble_t__const_iterator, 
_swigt__p_std__pairTdouble_double_t, 
_swigt__p_std__vectorTdouble_t, 
_swigt__p_std__string, 
_swigt__p_optimizers__Optimizer, 
_swigt__p_std__vectorTstd__vectorTdouble_t_t, 
_swigt__p_optimizers__Exception, 
_swigt__p_optimizers__Rosen, 
_swigt__p_std__vectorToptimizers__Arg_p_t, 
_swigt__p_mfcn, 
_swigt__p_optimizers__Arg, 
_swigt__p_optimizers__dArg, 
_swigt__p_optimizers__Parameter, 
_swigt__p_optimizers__OutOfBounds, 
_swigt__p_optimizers__MyFun, 
_swigt__p_optimizers__PowerLaw, 
_swigt__p_optimizers__Mcmc, 
_swigt__p_optimizers__SumFunction, 
_swigt__p_optimizers__ProductFunction, 
_swigt__p_optimizers__Function, 
_swigt__p_optimizers__CompositeFunction, 
_swigt__p_int, 
_swigt__p_optimizers__AbsEdge, 
_swigt__p_std__vectorTstd__string_t, 
_swigt__p_optimizers__Drmngb, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"OutOfBounds_VALUE_ERROR", (long) optimizers::OutOfBounds::VALUE_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OutOfBounds_BOUNDS_ERROR", (long) optimizers::OutOfBounds::BOUNDS_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Function_None", (long) optimizers::Function::None, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Function_Addend", (long) optimizers::Function::Addend, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Function_Factor", (long) optimizers::Function::Factor, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Lbfgs_LBFGS_NORMAL", (long) optimizers::Lbfgs::LBFGS_NORMAL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Lbfgs_LBFGS_ABNO", (long) optimizers::Lbfgs::LBFGS_ABNO, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Lbfgs_LBFGS_ERROR", (long) optimizers::Lbfgs::LBFGS_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Lbfgs_LBFGS_TOOMANY", (long) optimizers::Lbfgs::LBFGS_TOOMANY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Lbfgs_LBFGS_UNKNOWN", (long) optimizers::Lbfgs::LBFGS_UNKNOWN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Minuit_MINUIT_NOTCALC", (long) optimizers::Minuit::MINUIT_NOTCALC, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Minuit_MINUIT_DIAG", (long) optimizers::Minuit::MINUIT_DIAG, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Minuit_MINUIT_FORCEDPOS", (long) optimizers::Minuit::MINUIT_FORCEDPOS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Minuit_MINUIT_NORMAL", (long) optimizers::Minuit::MINUIT_NORMAL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_XCONV", (long) optimizers::Drmngb::XCONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_RELCONV", (long) optimizers::Drmngb::RELCONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_BOTHCONV", (long) optimizers::Drmngb::BOTHCONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_ABSCONV", (long) optimizers::Drmngb::ABSCONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_SINGCONV", (long) optimizers::Drmngb::SINGCONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_FALSECONV", (long) optimizers::Drmngb::FALSECONV, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_EVALLIM", (long) optimizers::Drmngb::EVALLIM, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_ITLIM", (long) optimizers::Drmngb::ITLIM, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_STOPX", (long) optimizers::Drmngb::STOPX, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_ALLOCATED", (long) optimizers::Drmngb::ALLOCATED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_LIVSMALL", (long) optimizers::Drmngb::LIVSMALL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_LVSMALL", (long) optimizers::Drmngb::LVSMALL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_RESTARTATT", (long) optimizers::Drmngb::RESTARTATT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_DNEG", (long) optimizers::Drmngb::DNEG, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_VORANGE", (long) optimizers::Drmngb::VORANGE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_CANTCOMPUTEF", (long) optimizers::Drmngb::CANTCOMPUTEF, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_BADPAR", (long) optimizers::Drmngb::BADPAR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_CANTCOMPUTEG", (long) optimizers::Drmngb::CANTCOMPUTEG, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_BADARR", (long) optimizers::Drmngb::BADARR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_BADPAR1", (long) optimizers::Drmngb::BADPAR1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Drmngb_BUGS", (long) optimizers::Drmngb::BUGS, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

